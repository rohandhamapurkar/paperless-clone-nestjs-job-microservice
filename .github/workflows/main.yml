 This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy Paperless Job Service

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'deploy:')

    steps:
      - name: Node version setup
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout paperless-job-microservice
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
          docker buildx build -t ${{ secrets.ECR_REPOSITORY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest -o type=registry .
          echo "::set-output name=image::${{ secrets.ECR_REPOSITORY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
      - run: 'echo "$ECS_TASK_DEFINITION" > task-definition.json'
        shell: bash
        env:
          SSH_KEY: ${{secrets.ECS_TASK_DEFINITION}}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true