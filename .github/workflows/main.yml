# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy Paperless Job Service

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2 # preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: public.ecr.aws/v6v6m1q7 # Amazon ECR repository name
  ECS_SERVICE: plc-job-service # Amazon ECS service name
  ECS_CLUSTER: plc-cluster # Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Amazon ECS task definition
  CONTAINER_NAME: paperless-job-microservice # name of the container

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '_deploy_')

    steps:
      - name: Node version setup
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout paperless-job-microservice
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
          docker buildx build -t ${{ env.ECR_REPOSITORY }}/${{ env.CONTAINER_NAME }}:latest -o type=registry .
          echo "::set-output name=image::${{ env.ECR_REPOSITORY }}/${{ env.CONTAINER_NAME }}:latest"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
